// File generated by FlutterFire CLI.

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show TargetPlatform, defaultTargetPlatform, kIsWeb;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  /// Builds and returns [FirebaseOptions] based on the current platform.
  ///
  /// Switches on the current platform and calls [android] or [iOS]
  /// methods accordingly to build the [FirebaseOptions]. Throws
  /// [UnsupportedError] if the platform is other than these two.
  ///
  /// **params**:
  /// * `androidFirebaseOptions`: Firebase Options for Android
  /// * `iosFirebaseOptions`: Firebase Options for iOS
  ///
  /// **returns**:
  /// * `FirebaseOptions`: The [FirebaseOptions] built according to the platform.
  static FirebaseOptions currentPlatform(
    Map<String, dynamic> androidFirebaseOptions,
    Map<String, dynamic> iosFirebaseOptions,
  ) {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android(androidFirebaseOptions);
      case TargetPlatform.iOS:
        return ios(iosFirebaseOptions);
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  /// Scaffolds androidFirebaseOptions around FirebaseOptions.
  ///
  /// **params**:
  /// * `androidFirebaseOptions`: The options which we want to scaffold
  ///
  /// **returns**:
  /// * `FirebaseOptions`: Scaffolded FirebaseOptions
  static FirebaseOptions android(Map<String, dynamic> androidFirebaseOptions) =>
      FirebaseOptions(
        apiKey: androidFirebaseOptions['apiKey'] as String,
        appId: androidFirebaseOptions['appId'] as String,
        messagingSenderId:
            androidFirebaseOptions['messagingSenderId'] as String,
        projectId: androidFirebaseOptions['projectId'] as String,
        storageBucket: androidFirebaseOptions['storageBucket'] as String,
      );

  /// Scaffolds iosFirebaseOptions around FirebaseOptions.
  ///
  /// more_info_if_required
  ///
  /// **params**:
  /// * `iosFirebaseOptions`: The options which we want to scaffold
  ///
  /// **returns**:
  /// * `FirebaseOptions`: Scaffolded FirebaseOptions
  static FirebaseOptions ios(Map<String, dynamic> iosFirebaseOptions) =>
      FirebaseOptions(
        apiKey: iosFirebaseOptions['apiKey'] as String,
        appId: iosFirebaseOptions['appId'] as String,
        messagingSenderId: iosFirebaseOptions['messagingSenderId'] as String,
        projectId: iosFirebaseOptions['projectId'] as String,
        storageBucket: iosFirebaseOptions['storageBucket'] as String,
        iosClientId: iosFirebaseOptions['iosClientId'] as String,
        iosBundleId: iosFirebaseOptions['iosBundleId'] as String,
      );
}
