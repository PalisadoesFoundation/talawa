// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions currentPlatform(
    Map<String, dynamic> androidFirebaseOptions,
    Map<String, dynamic> iosFirebaseOptions,
  ) {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    // ignore: missing_enum_constant_in_switch
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android(androidFirebaseOptions);
      case TargetPlatform.iOS:
        return ios(iosFirebaseOptions);
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
    }

    throw UnsupportedError(
      'DefaultFirebaseOptions are not supported for this platform.',
    );
  }

  static FirebaseOptions android(Map<String, dynamic> androidFirebaseOptions) =>
      FirebaseOptions(
        apiKey: androidFirebaseOptions['apiKey'] as String,
        appId: androidFirebaseOptions['appId'] as String,
        messagingSenderId:
            androidFirebaseOptions['messagingSenderId'] as String,
        projectId: androidFirebaseOptions['projectId'] as String,
        storageBucket: androidFirebaseOptions['storageBucket'] as String,
      );

  static FirebaseOptions ios(Map<String, dynamic> iosFirebaseOptions) =>
      FirebaseOptions(
        apiKey: iosFirebaseOptions['apiKey'] as String,
        appId: iosFirebaseOptions['appId'] as String,
        messagingSenderId: iosFirebaseOptions['messagingSenderId'] as String,
        projectId: iosFirebaseOptions['projectId'] as String,
        storageBucket: iosFirebaseOptions['storageBucket'] as String,
        iosClientId: iosFirebaseOptions['iosClientId'] as String,
        iosBundleId: iosFirebaseOptions['iosBundleId'] as String,
      );
}
