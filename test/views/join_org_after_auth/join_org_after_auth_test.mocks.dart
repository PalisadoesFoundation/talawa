// Mocks generated by Mockito 5.4.3 from annotations
// in talawa/test/views/join_org_after_auth/join_org_after_auth_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i10;

import 'package:flutter/cupertino.dart' as _i1;
import 'package:graphql_flutter/graphql_flutter.dart' as _i9;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:qr_code_scanner/qr_code_scanner.dart' as _i3;
import 'package:talawa/enums/enums.dart' as _i7;
import 'package:talawa/models/organization/org_info.dart' as _i4;
import 'package:talawa/view_model/pre_auth_view_models/select_organization_view_model.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBarcode_1 extends _i2.SmartFake implements _i3.Barcode {
  _FakeBarcode_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollController_2 extends _i2.SmartFake
    implements _i1.ScrollController {
  _FakeScrollController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFocusNode_3 extends _i2.SmartFake implements _i1.FocusNode {
  _FakeFocusNode_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeTextEditingController_4 extends _i2.SmartFake
    implements _i1.TextEditingController {
  _FakeTextEditingController_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrgInfo_5 extends _i2.SmartFake implements _i4.OrgInfo {
  _FakeOrgInfo_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_6 extends _i2.SmartFake implements _i1.Widget {
  _FakeWidget_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [SelectOrganizationViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSelectOrganizationViewModel extends _i2.Mock
    implements _i5.SelectOrganizationViewModel {
  MockSelectOrganizationViewModel() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.State<_i1.StatefulWidget>> get qrKey => (super.noSuchMethod(
        Invocation.getter(#qrKey),
        returnValue: _FakeGlobalKey_0<_i1.State<_i1.StatefulWidget>>(
          this,
          Invocation.getter(#qrKey),
        ),
      ) as _i1.GlobalKey<_i1.State<_i1.StatefulWidget>>);

  @override
  _i3.Barcode get result => (super.noSuchMethod(
        Invocation.getter(#result),
        returnValue: _FakeBarcode_1(
          this,
          Invocation.getter(#result),
        ),
      ) as _i3.Barcode);

  @override
  set result(_i3.Barcode? _result) => super.noSuchMethod(
        Invocation.setter(
          #result,
          _result,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i1.ScrollController get allOrgController => (super.noSuchMethod(
        Invocation.getter(#allOrgController),
        returnValue: _FakeScrollController_2(
          this,
          Invocation.getter(#allOrgController),
        ),
      ) as _i1.ScrollController);

  @override
  _i1.ScrollController get controller => (super.noSuchMethod(
        Invocation.getter(#controller),
        returnValue: _FakeScrollController_2(
          this,
          Invocation.getter(#controller),
        ),
      ) as _i1.ScrollController);

  @override
  _i1.FocusNode get searchFocus => (super.noSuchMethod(
        Invocation.getter(#searchFocus),
        returnValue: _FakeFocusNode_3(
          this,
          Invocation.getter(#searchFocus),
        ),
      ) as _i1.FocusNode);

  @override
  _i1.TextEditingController get searchController => (super.noSuchMethod(
        Invocation.getter(#searchController),
        returnValue: _FakeTextEditingController_4(
          this,
          Invocation.getter(#searchController),
        ),
      ) as _i1.TextEditingController);

  @override
  _i4.OrgInfo get selectedOrganization => (super.noSuchMethod(
        Invocation.getter(#selectedOrganization),
        returnValue: _FakeOrgInfo_5(
          this,
          Invocation.getter(#selectedOrganization),
        ),
      ) as _i4.OrgInfo);

  @override
  set selectedOrganization(_i4.OrgInfo? _selectedOrganization) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedOrganization,
          _selectedOrganization,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.OrgInfo> get organizations => (super.noSuchMethod(
        Invocation.getter(#organizations),
        returnValue: <_i4.OrgInfo>[],
      ) as List<_i4.OrgInfo>);

  @override
  set organizations(List<_i4.OrgInfo>? _organizations) => super.noSuchMethod(
        Invocation.setter(
          #organizations,
          _organizations,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get searching => (super.noSuchMethod(
        Invocation.getter(#searching),
        returnValue: false,
      ) as bool);

  @override
  set searching(bool? _searching) => super.noSuchMethod(
        Invocation.setter(
          #searching,
          _searching,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i1.Widget get showSearchOrgList => (super.noSuchMethod(
        Invocation.getter(#showSearchOrgList),
        returnValue: _FakeWidget_6(
          this,
          Invocation.getter(#showSearchOrgList),
        ),
      ) as _i1.Widget);

  @override
  set showSearchOrgList(_i1.Widget? _showSearchOrgList) => super.noSuchMethod(
        Invocation.setter(
          #showSearchOrgList,
          _showSearchOrgList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get orgId => (super.noSuchMethod(
        Invocation.getter(#orgId),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#orgId),
        ),
      ) as String);

  @override
  set orgId(String? _orgId) => super.noSuchMethod(
        Invocation.setter(
          #orgId,
          _orgId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.ViewState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i7.ViewState.idle,
      ) as _i7.ViewState);

  @override
  bool get isBusy => (super.noSuchMethod(
        Invocation.getter(#isBusy),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void searchActive() => super.noSuchMethod(
        Invocation.method(
          #searchActive,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> initialise(String? initialData) => (super.noSuchMethod(
        Invocation.method(
          #initialise,
          [initialData],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> selectOrg(_i4.OrgInfo? item) => (super.noSuchMethod(
        Invocation.method(
          #selectOrg,
          [item],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onTapContinue() => super.noSuchMethod(
        Invocation.method(
          #onTapContinue,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> onTapJoin() => (super.noSuchMethod(
        Invocation.method(
          #onTapJoin,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void fetchMoreHelper(
    _i9.FetchMore<Object?>? fetchMore,
    List<dynamic>? organizations,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #fetchMoreHelper,
          [
            fetchMore,
            organizations,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setState(_i7.ViewState? viewState) => super.noSuchMethod(
        Invocation.method(
          #setState,
          [viewState],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
