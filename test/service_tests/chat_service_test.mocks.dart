// Mocks generated by Mockito 5.4.5 from annotations
// in talawa/test/service_tests/chat_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:talawa/models/chats/chat.dart' as _i5;
import 'package:talawa/models/chats/chat_message.dart' as _i8;
import 'package:talawa/services/chat_core_service.dart' as _i3;
import 'package:talawa/services/chat_membership_service.dart' as _i6;
import 'package:talawa/services/chat_message_service.dart' as _i7;
import 'package:talawa/services/navigation_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNavigationService_0 extends _i1.SmartFake
    implements _i2.NavigationService {
  _FakeNavigationService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatCoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatCoreService extends _i1.Mock implements _i3.ChatCoreService {
  MockChatCoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NavigationService get navigationService => (super.noSuchMethod(
        Invocation.getter(#navigationService),
        returnValue: _FakeNavigationService_0(
          this,
          Invocation.getter(#navigationService),
        ),
      ) as _i2.NavigationService);

  @override
  _i4.Stream<_i5.Chat> get chatListStream => (super.noSuchMethod(
        Invocation.getter(#chatListStream),
        returnValue: _i4.Stream<_i5.Chat>.empty(),
      ) as _i4.Stream<_i5.Chat>);

  @override
  _i4.Future<_i5.Chat?> createChat({
    required String? name,
    String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChat,
          [],
          {
            #name: name,
            #description: description,
          },
        ),
        returnValue: _i4.Future<_i5.Chat?>.value(),
      ) as _i4.Future<_i5.Chat?>);

  @override
  _i4.Future<List<_i5.Chat>> getChatsByUser() => (super.noSuchMethod(
        Invocation.method(
          #getChatsByUser,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Chat>>.value(<_i5.Chat>[]),
      ) as _i4.Future<List<_i5.Chat>>);

  @override
  _i4.Future<bool> deleteChat(String? chatId) => (super.noSuchMethod(
        Invocation.method(
          #deleteChat,
          [chatId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> updateChat({
    required String? chatId,
    String? newName,
    String? newDescription,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateChat,
          [],
          {
            #chatId: chatId,
            #newName: newName,
            #newDescription: newDescription,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ChatMembershipService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatMembershipService extends _i1.Mock
    implements _i6.ChatMembershipService {
  MockChatMembershipService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NavigationService get navigationService => (super.noSuchMethod(
        Invocation.getter(#navigationService),
        returnValue: _FakeNavigationService_0(
          this,
          Invocation.getter(#navigationService),
        ),
      ) as _i2.NavigationService);

  @override
  _i4.Future<bool> createChatMembership({
    required String? chatId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChatMembership,
          [],
          {
            #chatId: chatId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> addChatMember({
    required String? chatId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addChatMember,
          [],
          {
            #chatId: chatId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> removeChatMember({
    required String? chatId,
    required String? memberId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChatMember,
          [],
          {
            #chatId: chatId,
            #memberId: memberId,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>?> fetchChatMembers({
    required String? chatId,
    int? first,
    int? last,
    String? after,
    String? before,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchChatMembers,
          [],
          {
            #chatId: chatId,
            #first: first,
            #last: last,
            #after: after,
            #before: before,
          },
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);
}

/// A class which mocks [ChatMessageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatMessageService extends _i1.Mock
    implements _i7.ChatMessageService {
  MockChatMessageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String?> get beforeCursor => (super.noSuchMethod(
        Invocation.getter(#beforeCursor),
        returnValue: <String, String?>{},
      ) as Map<String, String?>);

  @override
  int get messagePageSize => (super.noSuchMethod(
        Invocation.getter(#messagePageSize),
        returnValue: 0,
      ) as int);

  @override
  set messagePageSize(int? _messagePageSize) => super.noSuchMethod(
        Invocation.setter(
          #messagePageSize,
          _messagePageSize,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<_i8.ChatMessage> get chatMessagesStream => (super.noSuchMethod(
        Invocation.getter(#chatMessagesStream),
        returnValue: _i4.Stream<_i8.ChatMessage>.empty(),
      ) as _i4.Stream<_i8.ChatMessage>);

  @override
  _i4.Future<_i5.Chat?> getChatDetails(
    String? chatId, {
    bool? isInitialLoad = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChatDetails,
          [chatId],
          {#isInitialLoad: isInitialLoad},
        ),
        returnValue: _i4.Future<_i5.Chat?>.value(),
      ) as _i4.Future<_i5.Chat?>);

  @override
  _i4.Future<List<_i8.ChatMessage>> loadMoreMessages(String? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMoreMessages,
          [chatId],
        ),
        returnValue:
            _i4.Future<List<_i8.ChatMessage>>.value(<_i8.ChatMessage>[]),
      ) as _i4.Future<List<_i8.ChatMessage>>);

  @override
  bool hasMoreMessages(String? chatId) => (super.noSuchMethod(
        Invocation.method(
          #hasMoreMessages,
          [chatId],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<_i8.ChatMessage?> sendMessage({
    required String? chatId,
    required String? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #chatId: chatId,
            #body: body,
          },
        ),
        returnValue: _i4.Future<_i8.ChatMessage?>.value(),
      ) as _i4.Future<_i8.ChatMessage?>);

  @override
  _i4.Stream<_i8.ChatMessage> subscribeToChatMessages(String? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToChatMessages,
          [chatId],
        ),
        returnValue: _i4.Stream<_i8.ChatMessage>.empty(),
      ) as _i4.Stream<_i8.ChatMessage>);

  @override
  void stopSubscription() => super.noSuchMethod(
        Invocation.method(
          #stopSubscription,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
